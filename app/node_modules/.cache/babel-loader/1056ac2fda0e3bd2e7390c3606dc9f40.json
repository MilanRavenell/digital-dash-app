{"ast":null,"code":"var _jsxFileName = \"/Users/milanravenell/Documents/digital_dash/digital-dash-app/src/AggregatedStatsContainer.js\";\nimport React from 'react';\nimport StatContainer from './StatContainer';\nimport './AggregatedStatsContainer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AggregatedStatsContainer = _ref => {\n  let {\n    data\n  } = _ref;\n\n  const getContent = () => {\n    return processDataKeys(Object.keys(data)).map(batch => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"AggregatedStatsContainer-row\",\n      children: batch.map(stat => stat != null ? /*#__PURE__*/_jsxDEV(StatContainer, {\n        name: stat,\n        value: data[stat]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 35\n      }, this) : /*#__PURE__*/_jsxDEV(StatContainer, {\n        name: '',\n        value: ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 35\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 17\n    }, this));\n  };\n\n  const processDataKeys = keys => {\n    const itemsPerBatch = 3;\n    const batched = keys.reduce((resultArray, item, index) => {\n      const chunkIndex = Math.floor(index / itemsPerBatch);\n\n      if (!resultArray[chunkIndex]) {\n        resultArray[chunkIndex] = []; // start a new chunk\n      }\n\n      resultArray[chunkIndex].push(item);\n      return resultArray;\n    }, []);\n\n    while (batched[batched.length - 1].length < itemsPerBatch) {\n      batched[batched.length - 1].push(null);\n    }\n\n    return batched;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"AggregatedStatsContainer\",\n    children: getContent()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_c = AggregatedStatsContainer;\nexport default AggregatedStatsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AggregatedStatsContainer\");","map":{"version":3,"names":["React","StatContainer","AggregatedStatsContainer","data","getContent","processDataKeys","Object","keys","map","batch","stat","itemsPerBatch","batched","reduce","resultArray","item","index","chunkIndex","Math","floor","push","length"],"sources":["/Users/milanravenell/Documents/digital_dash/digital-dash-app/src/AggregatedStatsContainer.js"],"sourcesContent":["\nimport React from 'react';\nimport StatContainer from './StatContainer';\nimport './AggregatedStatsContainer.css';\n\nconst AggregatedStatsContainer = ({ data }) => {\n\n    const getContent = () => {\n        return processDataKeys(Object.keys(data))\n            .map((batch) => (\n                <div className='AggregatedStatsContainer-row'>\n                    {\n                        batch.map((stat) => (\n                            stat != null\n                                ? <StatContainer name={stat} value={data[stat]}/>\n                                : <StatContainer name={''} value={''}/>\n                        ))\n                    }\n                </div>\n            ));\n    }\n\n    const processDataKeys = (keys) => {\n        const itemsPerBatch = 3;\n\n        const batched = keys.reduce((resultArray, item, index) => {\n            const chunkIndex = Math.floor(index/itemsPerBatch)\n            \n            if(!resultArray[chunkIndex]) {\n                resultArray[chunkIndex] = [] // start a new chunk\n            }\n            \n            resultArray[chunkIndex].push(item)\n            \n            return resultArray\n        }, []);\n\n        while (batched[batched.length - 1].length < itemsPerBatch) {\n            batched[batched.length - 1].push(null);\n        }\n\n        return batched\n    }\n\n    return (\n        <div className='AggregatedStatsContainer'>\n            { getContent() }\n        </div>\n    )\n}\n\nexport default AggregatedStatsContainer;"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAO,gCAAP;;;AAEA,MAAMC,wBAAwB,GAAG,QAAc;EAAA,IAAb;IAAEC;EAAF,CAAa;;EAE3C,MAAMC,UAAU,GAAG,MAAM;IACrB,OAAOC,eAAe,CAACC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,CAAD,CAAf,CACFK,GADE,CACGC,KAAD,iBACD;MAAK,SAAS,EAAC,8BAAf;MAAA,UAEQA,KAAK,CAACD,GAAN,CAAWE,IAAD,IACNA,IAAI,IAAI,IAAR,gBACM,QAAC,aAAD;QAAe,IAAI,EAAEA,IAArB;QAA2B,KAAK,EAAEP,IAAI,CAACO,IAAD;MAAtC;QAAA;QAAA;QAAA;MAAA,QADN,gBAEM,QAAC,aAAD;QAAe,IAAI,EAAE,EAArB;QAAyB,KAAK,EAAE;MAAhC;QAAA;QAAA;QAAA;MAAA,QAHV;IAFR;MAAA;MAAA;MAAA;IAAA,QAFD,CAAP;EAYH,CAbD;;EAeA,MAAML,eAAe,GAAIE,IAAD,IAAU;IAC9B,MAAMI,aAAa,GAAG,CAAtB;IAEA,MAAMC,OAAO,GAAGL,IAAI,CAACM,MAAL,CAAY,CAACC,WAAD,EAAcC,IAAd,EAAoBC,KAApB,KAA8B;MACtD,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,GAACL,aAAjB,CAAnB;;MAEA,IAAG,CAACG,WAAW,CAACG,UAAD,CAAf,EAA6B;QACzBH,WAAW,CAACG,UAAD,CAAX,GAA0B,EAA1B,CADyB,CACI;MAChC;;MAEDH,WAAW,CAACG,UAAD,CAAX,CAAwBG,IAAxB,CAA6BL,IAA7B;MAEA,OAAOD,WAAP;IACH,CAVe,EAUb,EAVa,CAAhB;;IAYA,OAAOF,OAAO,CAACA,OAAO,CAACS,MAAR,GAAiB,CAAlB,CAAP,CAA4BA,MAA5B,GAAqCV,aAA5C,EAA2D;MACvDC,OAAO,CAACA,OAAO,CAACS,MAAR,GAAiB,CAAlB,CAAP,CAA4BD,IAA5B,CAAiC,IAAjC;IACH;;IAED,OAAOR,OAAP;EACH,CApBD;;EAsBA,oBACI;IAAK,SAAS,EAAC,0BAAf;IAAA,UACMR,UAAU;EADhB;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CA5CD;;KAAMF,wB;AA8CN,eAAeA,wBAAf"},"metadata":{},"sourceType":"module"}