{"ast":null,"code":"function getGraphData(partitionedRecords, platforms) {\n  const results = {};\n\n  for (const platform of platforms) {\n    const filteredRecords = {};\n\n    for (const timeframe in partitionedRecords) {\n      filteredRecords[timeframe] = partitionedRecords[timeframe].filter(record => record['Platform'] === platform);\n    }\n\n    results[platform] = getGraphDataFromRecords(filteredRecords);\n  }\n\n  results['global'] = getGraphDataFromRecords(partitionedRecords);\n  return results;\n}\n\nfunction getGraphDataFromRecords(partitionedRecords) {\n  return timeframes.reduce((acc, _ref, index) => {\n    let {\n      name: timeframeName\n    } = _ref;\n    const data = timeframes.slice(0, index + 1).map(tf => partitionedRecords[tf.name]).flat();\n    const partitions = getGraphPartitionsFromTimeframe(timeframeName);\n    const viewsPartitoned = partitions.reduce((acc, partition) => ({ ...acc,\n      [partition]: 0\n    }), {});\n    const engagementPartitioned = partitions.reduce((acc, partition) => ({ ...acc,\n      [partition]: 0\n    }), {});\n    let partitionIndex = 0;\n    data.every(datum => {\n      while (new Date(datum['Date']) < new Date(partitions[partitionIndex])) {\n        ++partitionIndex;\n\n        if (partitionIndex >= partitions.length) {\n          return false;\n        }\n      }\n\n      const partition = partitions[partitionIndex];\n      viewsPartitoned[partition] += parseInt(datum['Views']);\n      engagementPartitioned[partition] += parseInt(datum['Total Engagement']);\n      return true;\n    });\n    console.log(viewsPartitoned);\n    acc[timeframeName] = {\n      labels: partitions.reverse(),\n      datasets: [{\n        label: 'Views',\n        data: Object.values(viewsPartitoned).reverse(),\n        backgroundColor: 'rgba(255, 99, 132, 0.5)'\n      }, {\n        label: 'Engagement',\n        data: Object.values(engagementPartitioned).reverse(),\n        backgroundColor: 'rgba(53, 162, 235, 0.5)'\n      }]\n    };\n    return acc;\n  }, {});\n}\n\nmodule.exports = getGraphData;","map":{"version":3,"names":["getGraphData","partitionedRecords","platforms","results","platform","filteredRecords","timeframe","filter","record","getGraphDataFromRecords","timeframes","reduce","acc","index","name","timeframeName","data","slice","map","tf","flat","partitions","getGraphPartitionsFromTimeframe","viewsPartitoned","partition","engagementPartitioned","partitionIndex","every","datum","Date","length","parseInt","console","log","labels","reverse","datasets","label","Object","values","backgroundColor","module","exports"],"sources":["/Users/milanravenell/Documents/digital_dash/digital-dash-app/src/data-manipulations/get-graph-data.js"],"sourcesContent":["function getGraphData(partitionedRecords, platforms) {\n    const results = {};\n    for (const platform of platforms) {\n        const filteredRecords = {};\n        for (const timeframe in partitionedRecords){\n            filteredRecords[timeframe] = partitionedRecords[timeframe].filter(record => (record['Platform'] === platform));\n        }\n        results[platform] = getGraphDataFromRecords(filteredRecords);\n    }\n    results['global'] = getGraphDataFromRecords(partitionedRecords);\n\n    return results;\n}\n\nfunction getGraphDataFromRecords(partitionedRecords) {\n    return timeframes.reduce((acc, { name:timeframeName }, index) => {\n        const data = timeframes.slice(0, index + 1).map(tf => partitionedRecords[tf.name]).flat();\n        const partitions = getGraphPartitionsFromTimeframe(timeframeName);\n\n        const viewsPartitoned = partitions.reduce((acc, partition) => ({ ...acc, [partition]: 0 }), {});\n        const engagementPartitioned = partitions.reduce((acc, partition) => ({ ...acc, [partition]: 0 }), {});\n\n        let partitionIndex = 0;\n        data.every((datum) => {\n            while (new Date(datum['Date']) < new Date(partitions[partitionIndex])) {\n                ++partitionIndex;\n                if (partitionIndex >= partitions.length) {\n                    return false;\n                }\n            }\n\n            const partition = partitions[partitionIndex];\n            viewsPartitoned[partition] += parseInt(datum['Views']);\n            engagementPartitioned[partition] += parseInt(datum['Total Engagement']);\n            return true;\n        });\n\n        console.log(viewsPartitoned)\n\n\n        acc[timeframeName] = {\n            labels: partitions.reverse(),\n            datasets: [\n                {\n                    label: 'Views',\n                    data: Object.values(viewsPartitoned).reverse(),\n                    backgroundColor: 'rgba(255, 99, 132, 0.5)',\n                },\n                {\n                    label: 'Engagement',\n                    data: Object.values(engagementPartitioned).reverse(),\n                    backgroundColor: 'rgba(53, 162, 235, 0.5)',\n                },\n            ]\n        };\n\n        return acc;\n    }, {});\n}\n\nmodule.exports = getGraphData;"],"mappings":"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"},"metadata":{},"sourceType":"module"}