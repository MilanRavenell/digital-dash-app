{"ast":null,"code":"function partitionPostsByTimeframe(records, timeframes) {\n  // Stamp each record with it's platform\n  const formattedRecords = {};\n\n  for (const platform of Object.keys(records)) {\n    formattedRecords[platform] = records[platform].map(record => formatRecord(record, platform));\n  }\n\n  const flattened = Object.values(formattedRecords).flat();\n  const datePartitions = getDatePartitions(timeframes);\n  flattened.sort((a, b) => {\n    return new Date(b['Date']) - new Date(a['Date']);\n  });\n  const result = timeframes.reduce((acc, _ref) => {\n    let {\n      name\n    } = _ref;\n    acc[name] = [];\n    return acc;\n  }, {});\n  let curPartition = 0;\n  flattened.forEach(record => {\n    if (datePartitions[curPartition] != null && new Date(record['Date']) < datePartitions[curPartition]) {\n      ++curPartition;\n    }\n\n    result[timeframes[curPartition].name].push(record);\n  });\n  return result;\n}\n\nmodule.exports = partitionPostsByTimeframe;","map":{"version":3,"names":["partitionPostsByTimeframe","records","timeframes","formattedRecords","platform","Object","keys","map","record","formatRecord","flattened","values","flat","datePartitions","getDatePartitions","sort","a","b","Date","result","reduce","acc","name","curPartition","forEach","push","module","exports"],"sources":["/Users/milanravenell/Documents/digital_dash/digital-dash-app/src/data-manipulations/partition-posts-by-timeframe.js"],"sourcesContent":["function partitionPostsByTimeframe(records, timeframes) {\n    // Stamp each record with it's platform\n    const formattedRecords = {};\n\n    for (const platform of Object.keys(records)) {\n        formattedRecords[platform] = records[platform].map(record => formatRecord(record, platform));\n    }\n\n    const flattened = Object.values(formattedRecords).flat();\n    const datePartitions = getDatePartitions(timeframes);\n    flattened.sort((a, b) => {\n        return (new Date(b['Date']) - new Date(a['Date']))\n    });\n\n    const result = timeframes.reduce((acc, { name }) => {\n        acc[name] = [];\n        return acc;\n    }, {});\n\n    let curPartition = 0;\n\n    flattened.forEach((record) => {\n        if (datePartitions[curPartition] != null && new Date(record['Date']) < datePartitions[curPartition]) {\n            ++curPartition;\n        }\n\n        result[timeframes[curPartition].name].push(record);\n    });\n\n    return result;\n}\n\nmodule.exports = partitionPostsByTimeframe;"],"mappings":"AAAA,SAASA,yBAAT,CAAmCC,OAAnC,EAA4CC,UAA5C,EAAwD;EACpD;EACA,MAAMC,gBAAgB,GAAG,EAAzB;;EAEA,KAAK,MAAMC,QAAX,IAAuBC,MAAM,CAACC,IAAP,CAAYL,OAAZ,CAAvB,EAA6C;IACzCE,gBAAgB,CAACC,QAAD,CAAhB,GAA6BH,OAAO,CAACG,QAAD,CAAP,CAAkBG,GAAlB,CAAsBC,MAAM,IAAIC,YAAY,CAACD,MAAD,EAASJ,QAAT,CAA5C,CAA7B;EACH;;EAED,MAAMM,SAAS,GAAGL,MAAM,CAACM,MAAP,CAAcR,gBAAd,EAAgCS,IAAhC,EAAlB;EACA,MAAMC,cAAc,GAAGC,iBAAiB,CAACZ,UAAD,CAAxC;EACAQ,SAAS,CAACK,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAU;IACrB,OAAQ,IAAIC,IAAJ,CAASD,CAAC,CAAC,MAAD,CAAV,IAAsB,IAAIC,IAAJ,CAASF,CAAC,CAAC,MAAD,CAAV,CAA9B;EACH,CAFD;EAIA,MAAMG,MAAM,GAAGjB,UAAU,CAACkB,MAAX,CAAkB,CAACC,GAAD,WAAmB;IAAA,IAAb;MAAEC;IAAF,CAAa;IAChDD,GAAG,CAACC,IAAD,CAAH,GAAY,EAAZ;IACA,OAAOD,GAAP;EACH,CAHc,EAGZ,EAHY,CAAf;EAKA,IAAIE,YAAY,GAAG,CAAnB;EAEAb,SAAS,CAACc,OAAV,CAAmBhB,MAAD,IAAY;IAC1B,IAAIK,cAAc,CAACU,YAAD,CAAd,IAAgC,IAAhC,IAAwC,IAAIL,IAAJ,CAASV,MAAM,CAAC,MAAD,CAAf,IAA2BK,cAAc,CAACU,YAAD,CAArF,EAAqG;MACjG,EAAEA,YAAF;IACH;;IAEDJ,MAAM,CAACjB,UAAU,CAACqB,YAAD,CAAV,CAAyBD,IAA1B,CAAN,CAAsCG,IAAtC,CAA2CjB,MAA3C;EACH,CAND;EAQA,OAAOW,MAAP;AACH;;AAEDO,MAAM,CAACC,OAAP,GAAiB3B,yBAAjB"},"metadata":{},"sourceType":"module"}