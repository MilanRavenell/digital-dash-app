{"ast":null,"code":"function getGraphData(records, timeframe) {\n  const data = timeframes.slice(0, index + 1).map(tf => partitionedRecords[tf.name]).flat();\n  const partitions = getGraphPartitionsFromTimeframe(timeframeName);\n  const viewsPartitoned = partitions.reduce((acc, partition) => ({ ...acc,\n    [partition]: 0\n  }), {});\n  const engagementPartitioned = partitions.reduce((acc, partition) => ({ ...acc,\n    [partition]: 0\n  }), {});\n  let partitionIndex = 0;\n  data.every(datum => {\n    while (new Date(datum['Date']) < new Date(partitions[partitionIndex])) {\n      ++partitionIndex;\n\n      if (partitionIndex >= partitions.length) {\n        return false;\n      }\n    }\n\n    const partition = partitions[partitionIndex];\n    viewsPartitoned[partition] += parseInt(datum['Views']);\n    engagementPartitioned[partition] += parseInt(datum['Total Engagement']);\n    return true;\n  });\n  console.log(viewsPartitoned);\n  acc[timeframeName] = {\n    labels: partitions.reverse(),\n    datasets: [{\n      label: 'Views',\n      data: Object.values(viewsPartitoned).reverse(),\n      backgroundColor: 'rgba(255, 99, 132, 0.5)'\n    }, {\n      label: 'Engagement',\n      data: Object.values(engagementPartitioned).reverse(),\n      backgroundColor: 'rgba(53, 162, 235, 0.5)'\n    }]\n  };\n  return acc;\n}\n\nmodule.exports = getGraphData;","map":{"version":3,"names":["getGraphData","records","timeframe","data","timeframes","slice","index","map","tf","partitionedRecords","name","flat","partitions","getGraphPartitionsFromTimeframe","timeframeName","viewsPartitoned","reduce","acc","partition","engagementPartitioned","partitionIndex","every","datum","Date","length","parseInt","console","log","labels","reverse","datasets","label","Object","values","backgroundColor","module","exports"],"sources":["/Users/milanravenell/Documents/digital_dash/digital-dash-app/src/data-manipulations/get-graph-data.js"],"sourcesContent":["function getGraphData(records, timeframe) {\n\n        const data = timeframes.slice(0, index + 1).map(tf => partitionedRecords[tf.name]).flat();\n        const partitions = getGraphPartitionsFromTimeframe(timeframeName);\n\n        const viewsPartitoned = partitions.reduce((acc, partition) => ({ ...acc, [partition]: 0 }), {});\n        const engagementPartitioned = partitions.reduce((acc, partition) => ({ ...acc, [partition]: 0 }), {});\n\n        let partitionIndex = 0;\n        data.every((datum) => {\n            while (new Date(datum['Date']) < new Date(partitions[partitionIndex])) {\n                ++partitionIndex;\n                if (partitionIndex >= partitions.length) {\n                    return false;\n                }\n            }\n\n            const partition = partitions[partitionIndex];\n            viewsPartitoned[partition] += parseInt(datum['Views']);\n            engagementPartitioned[partition] += parseInt(datum['Total Engagement']);\n            return true;\n        });\n\n        console.log(viewsPartitoned)\n\n\n        acc[timeframeName] = {\n            labels: partitions.reverse(),\n            datasets: [\n                {\n                    label: 'Views',\n                    data: Object.values(viewsPartitoned).reverse(),\n                    backgroundColor: 'rgba(255, 99, 132, 0.5)',\n                },\n                {\n                    label: 'Engagement',\n                    data: Object.values(engagementPartitioned).reverse(),\n                    backgroundColor: 'rgba(53, 162, 235, 0.5)',\n                },\n            ]\n        };\n\n        return acc;\n}\n\nmodule.exports = getGraphData;"],"mappings":"AAAA,SAASA,YAAT,CAAsBC,OAAtB,EAA+BC,SAA/B,EAA0C;EAElC,MAAMC,IAAI,GAAGC,UAAU,CAACC,KAAX,CAAiB,CAAjB,EAAoBC,KAAK,GAAG,CAA5B,EAA+BC,GAA/B,CAAmCC,EAAE,IAAIC,kBAAkB,CAACD,EAAE,CAACE,IAAJ,CAA3D,EAAsEC,IAAtE,EAAb;EACA,MAAMC,UAAU,GAAGC,+BAA+B,CAACC,aAAD,CAAlD;EAEA,MAAMC,eAAe,GAAGH,UAAU,CAACI,MAAX,CAAkB,CAACC,GAAD,EAAMC,SAAN,MAAqB,EAAE,GAAGD,GAAL;IAAU,CAACC,SAAD,GAAa;EAAvB,CAArB,CAAlB,EAAoE,EAApE,CAAxB;EACA,MAAMC,qBAAqB,GAAGP,UAAU,CAACI,MAAX,CAAkB,CAACC,GAAD,EAAMC,SAAN,MAAqB,EAAE,GAAGD,GAAL;IAAU,CAACC,SAAD,GAAa;EAAvB,CAArB,CAAlB,EAAoE,EAApE,CAA9B;EAEA,IAAIE,cAAc,GAAG,CAArB;EACAjB,IAAI,CAACkB,KAAL,CAAYC,KAAD,IAAW;IAClB,OAAO,IAAIC,IAAJ,CAASD,KAAK,CAAC,MAAD,CAAd,IAA0B,IAAIC,IAAJ,CAASX,UAAU,CAACQ,cAAD,CAAnB,CAAjC,EAAuE;MACnE,EAAEA,cAAF;;MACA,IAAIA,cAAc,IAAIR,UAAU,CAACY,MAAjC,EAAyC;QACrC,OAAO,KAAP;MACH;IACJ;;IAED,MAAMN,SAAS,GAAGN,UAAU,CAACQ,cAAD,CAA5B;IACAL,eAAe,CAACG,SAAD,CAAf,IAA8BO,QAAQ,CAACH,KAAK,CAAC,OAAD,CAAN,CAAtC;IACAH,qBAAqB,CAACD,SAAD,CAArB,IAAoCO,QAAQ,CAACH,KAAK,CAAC,kBAAD,CAAN,CAA5C;IACA,OAAO,IAAP;EACH,CAZD;EAcAI,OAAO,CAACC,GAAR,CAAYZ,eAAZ;EAGAE,GAAG,CAACH,aAAD,CAAH,GAAqB;IACjBc,MAAM,EAAEhB,UAAU,CAACiB,OAAX,EADS;IAEjBC,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,OADX;MAEI5B,IAAI,EAAE6B,MAAM,CAACC,MAAP,CAAclB,eAAd,EAA+Bc,OAA/B,EAFV;MAGIK,eAAe,EAAE;IAHrB,CADM,EAMN;MACIH,KAAK,EAAE,YADX;MAEI5B,IAAI,EAAE6B,MAAM,CAACC,MAAP,CAAcd,qBAAd,EAAqCU,OAArC,EAFV;MAGIK,eAAe,EAAE;IAHrB,CANM;EAFO,CAArB;EAgBA,OAAOjB,GAAP;AACP;;AAEDkB,MAAM,CAACC,OAAP,GAAiBpC,YAAjB"},"metadata":{},"sourceType":"module"}