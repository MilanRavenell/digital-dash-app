{"ast":null,"code":"import { promises as fs } from 'fs';\nimport { parse } from 'csv-parse/sync';\nconst platforms = ['twitter', 'youtube', 'tiktok'];\nconst timeframes = ['day', 'week', 'month', 'year'];\nconst metrics = ['views', 'engagements'];\n\nasync function get_values() {\n  const db_records = await get_db_records();\n  const results = {};\n\n  for (const platform of platforms) {\n    results[platform] = get_metrics_from_records(db_records[platform]);\n  }\n\n  const total_records = Object.values(db_records).flat();\n  results['global'] = get_metrics_from_records(total_records);\n  return results;\n}\n\nasync function get_db_records() {\n  const records = {};\n\n  for (const platform of platforms) {\n    records[platform] = await get_data_from_csv_file(`../../data/${platform}_metrics.csv`);\n  }\n\n  return records;\n}\n\nasync function get_data_from_csv_file(filepath) {\n  const data = await fs.readFile(filepath, 'utf8');\n  return parse(data, {\n    columns: true,\n    trim: true\n  });\n}\n\nfunction get_metrics_from_records(records) {\n  return timeframes.reduce((acc, timeframe) => {\n    acc[timeframe] = get_total_and_average_from_records(get_records_in_timeframe(timeframe, records));\n    return acc;\n  }, {});\n}\n\nfunction get_total_and_average_from_records(records) {\n  const calculations = metrics.reduce((acc, metric) => {\n    acc[`total_${metric}`] = 0;\n    return acc;\n  }, {});\n  const len = records.length;\n\n  for (const record of records) {\n    metrics.forEach(metric => {\n      calculations[`total_${metric}`] += get_int_from_string(record[metric]);\n    });\n  }\n\n  metrics.forEach(metric => {\n    calculations[`avg_${metric}`] = len === 0 ? 0 : calculations[`total_${metric}`] / len;\n  });\n  return calculations;\n}\n\nfunction get_int_from_string(number) {\n  number.replace(',', '.');\n\n  if (number === '') {\n    return 0;\n  }\n\n  if (number.includes('K')) {\n    return parseFloat(number.split('K')[0]) * 1000;\n  }\n\n  if (number.includes('M')) {\n    return parseFloat(number.split('M')[0]) * 1000000;\n  }\n\n  return parseFloat(number);\n}\n\nfunction get_records_in_timeframe(timeframe, records) {\n  return records; //TODO: include date with each record so this can be properly calculated\n\n  const cutoff = {\n    'day': '',\n    'week': '',\n    'month': '',\n    'year': ''\n  }[timeframe];\n  return records.filter(record => record.date > cutoff);\n}","map":{"version":3,"names":["promises","fs","parse","platforms","timeframes","metrics","get_values","db_records","get_db_records","results","platform","get_metrics_from_records","total_records","Object","values","flat","records","get_data_from_csv_file","filepath","data","readFile","columns","trim","reduce","acc","timeframe","get_total_and_average_from_records","get_records_in_timeframe","calculations","metric","len","length","record","forEach","get_int_from_string","number","replace","includes","parseFloat","split","cutoff","filter","date"],"sources":["/Users/milanravenell/Documents/digital_dash/app/digital-dash-app/src/db_apis/local_df_apis.js"],"sourcesContent":["import { promises as fs } from 'fs';\nimport { parse } from 'csv-parse/sync';\n\nconst platforms = ['twitter', 'youtube', 'tiktok'];\nconst timeframes = ['day', 'week', 'month', 'year'];\nconst metrics = ['views', 'engagements'];\n\nasync function get_values() {\n    const db_records = await get_db_records();\n\n    const results = {}\n    for (const platform of platforms) {\n        results[platform] = get_metrics_from_records(db_records[platform]);\n    }\n\n    const total_records = Object.values(db_records).flat();\n\n    results['global'] = get_metrics_from_records(total_records);\n    return results\n}\n\nasync function get_db_records() {\n    const records = {};\n    for (const platform of platforms) {\n        records[platform] = await get_data_from_csv_file(`../../data/${platform}_metrics.csv`);\n    }\n\n    return records;\n}\n\nasync function get_data_from_csv_file(filepath) {\n    const data = await fs.readFile(filepath, 'utf8');\n    return parse(data, {columns: true, trim: true});\n}\n\nfunction get_metrics_from_records(records) {\n    return timeframes\n        .reduce((acc, timeframe) => {\n            acc[timeframe] = get_total_and_average_from_records(get_records_in_timeframe(timeframe, records))\n            return acc;\n        }, {});\n}\n\nfunction get_total_and_average_from_records(records) {\n    const calculations = metrics.reduce((acc, metric) => {\n        acc[`total_${metric}`] = 0\n        return acc\n    }, {});\n\n    const len = records.length;\n\n    for (const record of records) {\n        metrics.forEach((metric) => {\n            calculations[`total_${metric}`] += get_int_from_string(record[metric]);\n        });\n    }\n\n    metrics.forEach((metric) => {\n        calculations[`avg_${metric}`] = (len === 0) ? 0 : calculations[`total_${metric}`] / len\n    });\n\n    return calculations;\n}\n\nfunction get_int_from_string(number) {\n    number.replace(',', '.')\n    \n    if (number === '') {\n        return 0;\n    }\n    if (number.includes('K')) {\n        return parseFloat(number.split('K')[0]) * 1000;\n    }\n    if (number.includes('M')) {\n        return parseFloat(number.split('M')[0]) * 1000000;\n    }\n\n    return parseFloat(number)\n}\n\nfunction get_records_in_timeframe(timeframe, records) {\n    return records;\n\n    //TODO: include date with each record so this can be properly calculated\n    const cutoff = {\n        'day': '',\n        'week': '',\n        'month': '',\n        'year': '',\n    }[timeframe];\n\n    return records.filter((record) => (record.date > cutoff));\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}