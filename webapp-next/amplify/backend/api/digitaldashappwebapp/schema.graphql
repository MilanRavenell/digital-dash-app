# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type User @model {
  email: String! @primaryKey
  firstName: String!
  lastName: String!
  postsLastPopulated: String
}

type UserProfile @model {
  user: String! @primaryKey(sortKeyFields: ["key"]) @index(name: "ByUserAndPlatform", sortKeyFields: ["platform"], queryField: "userProfilesByUserAndPlatform")
  key: String! # <platform>_<profileName>
  platform: String!
  profileName: String!
  meta: String
}

type TwitterPost @model
{

  id: String! @primaryKey
  createdAt: String!
  profileName: String! @index(name: "ByProfileName", sortKeyFields: ["datePosted"], queryField: "twitterPostsByProfileName")
  datePosted: String!
  caption: String!
  link: String!
  media: [PostMedia!]!
  viewCount: Int
  engagementCount: Int
  profileClickCount: Int
  likeCount: Int
  detailExpandCount: Int
  mediaEngagementCount: Int
  replyCount: Int
  retweetCount: Int
}

type YoutubePost @model
{
  id: String! @primaryKey
  createdAt: String!
  profileName: String! @index(name: "ByProfileName", sortKeyFields: ["datePosted"], queryField: "youtubePostsByProfileName")
  datePosted: String!
  caption: String!
  link: String!
  media: [PostMedia!]!
  viewCount: Int
  engagementCount: Int
  likeCount: Int
  commentCount: Int
  dislikeCount: Int
  favoriteCount: Int
}

type InstagramPost @model
{
  id: String! @primaryKey
  createdAt: String!
  profileName: String! @index(name: "ByProfileName", sortKeyFields: ["datePosted"], queryField: "igPostsByProfileName")
  datePosted: String!
  caption: String!
  link: String!
  media: [PostMedia!]!
  viewCount: Int
  engagementCount: Int
  likeCount: Int
  commentCount: Int
  saveCount: Int
  reachCount: Int
}

type TiktokPost @model
{
  id: String! @primaryKey
  createdAt: String!
  profileName: String! @index(name: "ByProfileName", sortKeyFields: ["datePosted"], queryField: "tiktokPostsByProfileName")
  datePosted: String!
  caption: String!
  link: String!
  media: [PostMedia!]!
  viewCount: Int
  engagementCount: Int
  likeCount: Int
  commentCount: Int
  shareCount: Int
}

# type PostMetric @model
# {
#   postId: String! 
# }

type PostMedia {
  thumbnailUrl: String!
  type: String!
}

input GetDataInput {
  username: String!
  selectedProfileNames: [String!]
  startDate: String
  endDate: String
}

type BeefedUserProfile {
  user: String!
  platform: String!
  profileName: String!
  profilePicUrl: String
  followerCount: Int
}

type GetDataGraph {
  labels: [String!]!
  datasets: [GetDataGraphDataset!]!
}

type GetDataGraphDataset {
  label: String!
  data: [Int!]!
  backgroundColor: String!
}

type GetDataAggregated {
  name: String!
  value: Float!
}

type GetDataDataTimeframe {
  name: String!
  startDate: String
  endDate: String
}

type GetDataDataMetric {
  displayName: String!
  field: String!
}

type GetDataDataPostHeader {
  platform: String!
  metrics: [GetDataDataMetric!]!
}

union Post = TwitterPost | YoutubePost | InstagramPost

type getDataData {
  profiles: [BeefedUserProfile!]
  graph: GetDataGraph
  aggregated: [GetDataAggregated!]
  timeframes: [GetDataDataTimeframe!]
  metrics: [GetDataDataMetric!]
  records: [Post!]
  postHeaders: [GetDataDataPostHeader!]!
}

type GetDataResponse {
  data: getDataData!
  success: Boolean!
}

input FindProfilesInput {
  platform: String!
  accessToken: String
}

type FindProfileResponseProfile {
  profileName: String!
  meta: String
}

type FindProfilesResponse {
  success: Boolean!
  profiles: [FindProfileResponseProfile!]!
}

input GetBeefedUserProfilesInput {
  username: String!
}

type GetBeefedUserProfilesResponse {
  profiles: [BeefedUserProfile]!
}

input PopulateAnalyticsInput {
  username: String!
}

type PopulateAnalyticsResponse {
  data: [Post]!
  dataUpdated: Boolean!
  success: Boolean!
}

type Mutation {
  populateAnalytics(input: PopulateAnalyticsInput!): PopulateAnalyticsResponse! @function(name: "digitalDashAppResolver", region: "us-west-2")
}

type Query {
  getData(input: GetDataInput!): GetDataResponse! @function(name: "digitalDashAppResolver", region: "us-west-2")
  findProfiles(input: FindProfilesInput!): FindProfilesResponse!  @function(name: "digitalDashAppResolver", region: "us-west-2")
  getBeefedUserProfiles(input: GetBeefedUserProfilesInput!): GetBeefedUserProfilesResponse!  @function(name: "digitalDashAppResolver", region: "us-west-2")
}
