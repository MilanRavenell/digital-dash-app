# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules

type User
@model
@auth(rules: [
    { allow: owner },
])
{
  owner: String! @primaryKey
  email: String!
  firstName: String!
  lastName: String!
  hasAccess: Boolean
  canEmail: Boolean
}

type UserProfile
@model
@auth(rules: [
    { allow: owner },
    { allow: private, operations: [read] },
])
{
  owner: String! @primaryKey(sortKeyFields: ["key"])
  key: String!
  profile: Profile @hasOne(fields: ["key"])
}

type Profile
@model(mutations: { create: "createProfile", update: "updateProfile" }, queries: null)
{
  key: String! @primaryKey # <platform>_<profileName>
  platform: String!
  profileName: String!
  meta: String
  profilePicUrl: String
  followerCount: Int
  needsRefresh: Boolean
  postsLastPopulated: String
}

type TwitterPost @model
{

  id: String! @primaryKey
  createdAt: String!
  profileName: String! @index(name: "ByProfileName", sortKeyFields: ["datePosted"], queryField: "twitterPostsByProfileName")
  datePosted: String!
  caption: String!
  link: String!
  media: [PostMedia!]!
  viewCount: Int
  engagementCount: Int
  engagementRate: Float
  profileClickCount: Int
  likeCount: Int
  detailExpandCount: Int
  mediaEngagementCount: Int
  replyCount: Int
  retweetCount: Int
}

type YoutubePost @model
{
  id: String! @primaryKey
  createdAt: String!
  profileName: String! @index(name: "ByProfileName", sortKeyFields: ["datePosted"], queryField: "youtubePostsByProfileName")
  datePosted: String!
  caption: String!
  link: String!
  media: [PostMedia!]!
  viewCount: Int
  engagementCount: Int
  engagementRate: Float
  likeCount: Int
  commentCount: Int
  dislikeCount: Int
  favoriteCount: Int
}

type InstagramPost @model
{
  id: String! @primaryKey
  createdAt: String!
  profileName: String! @index(name: "ByProfileName", sortKeyFields: ["datePosted"], queryField: "igPostsByProfileName")
  datePosted: String!
  caption: String!
  link: String!
  media: [PostMedia!]!
  viewCount: Int
  engagementCount: Int
  engagementRate: Float
  likeCount: Int
  commentCount: Int
  saveCount: Int
  reachCount: Int
}

type TiktokPost @model
{
  id: String! @primaryKey
  createdAt: String!
  profileName: String! @index(name: "ByProfileName", sortKeyFields: ["datePosted"], queryField: "tiktokPostsByProfileName")
  datePosted: String!
  caption: String!
  link: String!
  media: [PostMedia!]!
  viewCount: Int
  engagementCount: Int
  engagementRate: Float
  likeCount: Int
  commentCount: Int
  shareCount: Int
}

type MetricHistory @model
{
  key: String! @primaryKey(sortKeyFields: ["createdAt"]) #<platform>_<profileName/postId>_<metric>
  profileKey: String! 
  metric: String!
  createdAt: String!
  value: Float!
}

type Configuration @model
{
  key: String! @primaryKey(sortKeyFields: ["value"])
  value: String!
  createdAt: String!
}

type PostMedia {
  thumbnailUrl: String!
  type: String!
}

input GetDataInput {
  owner: String!
  selectedProfileNames: [String!]
  startDate: String
  endDate: String
  timezoneOffset: Int
}

type GetDataGraph {
  name: String!
  type: String!
  graph: GetDataGraphGraph!
}

type GetDataGraphGraph {
  labels: [String!]!
  datasets: [GetDataGraphDataset!]!
}

type GetDataGraphDataset {
  label: String!
  data: [Float!]!
  backgroundColor: String
  borderColor: String
}

type GetDataAggregatedStat {
  name: String!
  value: String!
  percentDiff: Float
}

type GetDataAggregated {
  previousComparisonTimeframeStart: String
  previousComparisonTimeframeEnd: String
  stats: [GetDataAggregatedStat!]!

}

type GetDataDataTimeframe {
  name: String!
  startDate: String
  endDate: String
}

type GetDataDataMetric {
  displayName: String!
  field: String!
}

type GetDataDataPostHeader {
  platform: String!
  metrics: [GetDataDataMetric!]!
}

union Post = TwitterPost | YoutubePost | InstagramPost | TiktokPost

type getDataData {
  graphs: [GetDataGraph!]
  aggregated: GetDataAggregated!
  timeframes: [GetDataDataTimeframe!]
  metrics: [GetDataDataMetric!]
  records: [Post!]
  postHeaders: [GetDataDataPostHeader!]
}

type GetDataResponse {
  data: getDataData!
  success: Boolean!
}

input FindProfilesInput {
  platform: String!
  accessToken: String
}

type FindProfileResponseProfile {
  profileName: String!
  meta: String
}

type FindProfilesResponse {
  success: Boolean!
  profiles: [FindProfileResponseProfile!]!
}

input PopulateAnalyticsInput {
  owner: String!
  profileKey: String!
}

type PopulateAnalyticsResponse {
  dataUpdated: Boolean!
  success: Boolean!
}

input DeleteProfileInput {
  owner: String!
  profileKey: String!
}

type DeleteProfileResponse {
  success: Boolean!
}

input InvokeWebScraperInput {
  options: String!
}

type InvokeWebScraperResponse {
  response: String
}

input TriggerSqsInput {
  queueUrl: String!
  body: String!
}

type TriggerSqsResponse {
  success: Boolean!
}

input InitUserInput {
  email: String!
  firstName: String!
  lastName: String!
  owner: String!
}

type InitUserResponse {
  success: Boolean!
  user: User!
}

input SubmitAccessCodeInput {
  owner: String!
  accessCode: String!
}

type SubmitAccessCodeResponse {
  success: Boolean!
}

input RemoveUserInput {
  owner: String!
}

type RemoveUserResponse {
  success: Boolean!
}

input GetProfilesInput {
  owner: String!
}

type GetProfilesResponse{
  success: Boolean!
  profiles: [Profile!]!
}

type Mutation {
  populateAnalytics(input: PopulateAnalyticsInput!): PopulateAnalyticsResponse! @function(name: "digitalDashAppResolver", region: "us-west-2")
  deleteProfile(input: DeleteProfileInput!): DeleteProfileResponse! @function(name: "digitalDashAppResolver", region: "us-west-2") @auth(rules: [{ allow: private }])
  triggerSqs(input: TriggerSqsInput!): TriggerSqsResponse! @function(name: "digitalDashAppResolver", region: "us-west-2") @auth(rules: [{ allow: private }])
  initUser(input: InitUserInput!): InitUserResponse! @function(name: "digitalDashAppResolver", region: "us-west-2") @auth(rules: [{ allow: private }])
  submitAccessCode(input: SubmitAccessCodeInput!): SubmitAccessCodeResponse! @function(name: "digitalDashAppResolver", region: "us-west-2") @auth(rules: [{ allow: private }])
  removeUser(input: RemoveUserInput!): RemoveUserResponse! @function(name: "digitalDashAppResolver", region: "us-west-2") @auth(rules: [{ allow: private }])
}

type Query {
  getData(input: GetDataInput!): GetDataResponse! @function(name: "digitalDashAppResolver", region: "us-west-2") @auth(rules: [{ allow: private }])
  findProfiles(input: FindProfilesInput!): FindProfilesResponse!  @function(name: "digitalDashAppResolver", region: "us-west-2")
  invokeWebScraper(input: InvokeWebScraperInput!): InvokeWebScraperResponse! @function(name: "digitalDashAppResolver", region: "us-west-2") @auth(rules: [{ allow: private }])
  getProfiles(input: GetProfilesInput!): GetProfilesResponse! @function(name: "digitalDashAppResolver", region: "us-west-2") @auth(rules: [{ allow: private }])
}
